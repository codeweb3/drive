#include <stdio.h>
#include <vector>
#include <algorithm>
#include <string.h>
#include <map>
#include <math.h>
#define ii pair<int, int>
using namespace std;

vector<ii> adj[100001];
vector<int> nodes;
map<ii, int> edges;
int last[100001], stshort[17][200000], stlong[17][200000];

void Eulerian_Tour(int x)
{
	last[x] = nodes.size();
	nodes.push_back(x);
	for(int i = 0; i < adj[x].size(); i++)
	{
		ii cur = adj[x][i];
		if(last[cur.first] != -1) continue;
		Eulerian_Tour(cur.first);
		last[x] = nodes.size();
		nodes.push_back(x);
	}
}

int main()
{
	int n, k, i, j, a, b, c;
	scanf("%d", &n);
	for(i = 0; i < n-1; i++)
	{
		scanf("%d %d %d", &a, &b, &c);
		adj[a].push_back(make_pair(b, c));
		adj[b].push_back(make_pair(a, c));
		edges[make_pair(a, b)] = c;
		edges[make_pair(b, a)] = c;
	}
	memset(last, -1, sizeof(last));
	Eulerian_Tour(1);
	for(i = 0; i < 2 * n -1; i++) printf("%d\n", nodes[i]);
	for(i = 0; i < 2 * n - 2; i++) stshort[0][i] = stlong[0][i] = edges[make_pair(nodes[i], nodes[i+1])];
	int h = log2(2 * n - 2);
	for(i = 1; i <= h; i++)
	{
		int p = pow(2, i);
		for(j = 0; j < 2 * n - 2; j++)
		{
			if(j + p - 1 >= 2 * n - 2) break;
			stshort[i][j] = min(stshort[i-1][j], stshort[i-1][j+p/2]);
			stlong[i][j]  = max(stlong[i-1][j], stlong[i-1][j+p/2]);
			printf("%d %d : %d %d\n", i, j, stshort[i][j], stlong[i][j]);
		}
	}
	scanf("%d", &k);
	for(i = 0; i < k; i++)
	{
		scanf("%d %d", &a, &b);
		a = last[a];
		b = last[b];
		if(a > b) swap(a, b);
		b--;
		int h2 = log2(b - a + 1), p = pow(2, h2);
		printf("p%d %d\n", a, b);
		printf("%d %d\n", min(stshort[h2][a], stshort[h2][b - p + 1]), max(stlong[h2][a], stlong[h2][b - p + 1]));
	}
}
